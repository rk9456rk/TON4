{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=371; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}
(int) tupleSize (tuple t) asm "TLEN";

() recv_internal() {
}
(tuple) convert_str_tuple( slice s)
{
  tuple ans = empty_tuple();
  tuple a = empty_tuple();
  while (~ s.slice_empty?()) {
    int char = s~load_uint(8);
    int number = (char - 48); ;; we use ASCII table
    a~tpush(number);
  }
  int n = a.tupleSize();
  int i = n - 1;
  while( i >= 0 )
  { int x = a.at(i);
    ans~tpush(x);
    i -= 1;
  }

  return ans;
}
(tuple) addTwoTuple(tuple a ,tuple b)
{
   tuple ans = empty_tuple();
   int n = a.tupleSize();
   int m = b.tupleSize();
   int i = 0;
   int r = 0;
   while( (i < m ) | (i < n) )
   {
      int x = a.at(i) + b.at(i) + r;
      r = x~divmod(10);
      ans~tpush(x);
      i += 1;
   }
   while( i < n )
   {
     int x = a.at(i) + r;
      r = x~divmod(10);
      ans~tpush(x);
      i += 1;
   }
   while( i < m )
   {
     int x = b.at(i) + r;
      r = x~divmod(10);
      ans~tpush(x);
      i += 1;
   }
   if( r > 0 ) 
   {
     ans~tpush(r);
   }

   return ans;
}
(slice) convert_tuple_to_str( tuple a)
{
   builder string = begin_cell();
   int n = a.tupleSize();
   int i = n - 1;
   while( i >= 0)
   {
      int char = 48 + a.at(i);
      string~store_uint(char, 8);
      i -= 1;
   }
   

   slice result = string.end_cell().begin_parse();

   return result;
}
(slice) addTwoString( slice s1 ,slice s2)
{
   tuple a = convert_str_tuple(s1);
   tuple b = convert_str_tuple(s2);
   tuple c = addTwoTuple( a, b);
   slice ans = convert_tuple_to_str(c);

   return ans;
}
;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  tuple ans = empty_tuple();
  slice a = "0";
  slice b = "1";
  int i = 0;


  while(i < n)
  {
    slice c = addTwoString(a,b);
    a = b;
    b = c;
    i = i + 1;
  }
  while(i < n + k)
  { 
    ans~tpush(a);
    slice c = addTwoString(a,b);
    a = b;
    b = c;
    i = i + 1;
  } 
  return ans;
}

