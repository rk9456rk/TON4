{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

int encryptIt(int x , int shift )
{  
   if( (x >= 97) & ( x < 97 + 26 ) )
     {
       int y = (x - 97 + shift );
       y = y~divmod(26);
       return ( 97 + y);
     }
    else
    {
   if( (x < 65 + 26 ) & ( x >= 65 ))
   { int y = (x - 65 + shift );
      y = y~divmod(26);
     return ( 65 + y );
   }
    }  
 
   return x;
}


(cell) formCell ( cell text ,int shift )
{     
      slice s = text.begin_parse();
      slice s_only_data = s.preload_bits(s.slice_bits());
      builder cur = begin_cell();

      
   
     while (~ s_only_data.slice_empty?()) {
      int char = s_only_data~load_uint(8);
      int x = encryptIt(char,shift) ;
      cur~store_uint( x,8); 
      }
        
     if(s.slice_refs()) {
      
            cur = cur.store_ref(formCell(s~load_ref(),shift ));
      }
      cell ans = cur.end_cell() ;
      return ans;
}

;; testable
int makeItPossitive( int n )
{
   if( n < 0)
   { 
     int y = ( - n ) / 26 ;

     n += ( y + 1 ) * 26; 
   }
   return n;
}
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift = makeItPossitive(shift);
  shift = shift~divmod(26);
  return formCell(text,shift);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  shift = -1 * shift ;
  shift = makeItPossitive(shift);
  shift = shift~divmod(26);
  return formCell(text,shift);
}



